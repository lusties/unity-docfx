{
  "api/Lustie.UnityDocfx.Build.html": {
    "href": "api/Lustie.UnityDocfx.Build.html",
    "title": "Class Build | Unity Docfx",
    "keywords": "Class Build Inheritance object Build Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Lustie.UnityDocfx Assembly: cs.temp.dll.dll Syntax [Serializable] public class Build Fields content Declaration public List<Content> content Field Value Type Description System.Collections.Generic.List<T><Content> dest Declaration public string dest Field Value Type Description string globalMetadata Declaration public GlobalMetadata globalMetadata Field Value Type Description GlobalMetadata resource Declaration public List<Resource> resource Field Value Type Description System.Collections.Generic.List<T><Resource> template Declaration public List<string> template Field Value Type Description System.Collections.Generic.List<T><string> Properties fullDest Declaration public string fullDest { get; } Property Value Type Description string"
  },
  "api/Lustie.UnityDocfx.Content.html": {
    "href": "api/Lustie.UnityDocfx.Content.html",
    "title": "Class Content | Unity Docfx",
    "keywords": "Class Content Inheritance object Content Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Lustie.UnityDocfx Assembly: cs.temp.dll.dll Syntax [Serializable] public class Content Fields dest Declaration public string dest Field Value Type Description string files Declaration public List<string> files Field Value Type Description System.Collections.Generic.List<T><string> src Declaration public string src Field Value Type Description string"
  },
  "api/Lustie.UnityDocfx.DocfxData.html": {
    "href": "api/Lustie.UnityDocfx.DocfxData.html",
    "title": "Class DocfxData | Unity Docfx",
    "keywords": "Class DocfxData Inheritance object DocfxData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Lustie.UnityDocfx Assembly: cs.temp.dll.dll Syntax [Serializable] public class DocfxData Fields build Declaration public Build build Field Value Type Description Build metadata Declaration public List<Metadata> metadata Field Value Type Description System.Collections.Generic.List<T><Metadata>"
  },
  "api/Lustie.UnityDocfx.DocfxService.html": {
    "href": "api/Lustie.UnityDocfx.DocfxService.html",
    "title": "Class DocfxService | Unity Docfx",
    "keywords": "Class DocfxService Provides services for interacting with docfx, including checking installation, installing docfx, opening command prompts, and running docfx commands. Inheritance object DocfxService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Lustie.UnityDocfx Assembly: cs.temp.dll.dll Syntax public static class DocfxService Fields installCommand Declaration public static readonly string installCommand Field Value Type Description string maxSupportVersion Declaration public static readonly Version maxSupportVersion Field Value Type Description System.Version uninstallCommand Declaration public static readonly string uninstallCommand Field Value Type Description string Methods CheckInstallation(out Version) Checks if docfx is installed and retrieves its version. Declaration public static bool CheckInstallation(out Version version) Parameters Type Name Description System.Version version The version of docfx if installed, otherwise an error message. Returns Type Description bool True if docfx is installed, otherwise false. GenDocfxJson(UnityDocset) Generates a docfx.json file for the UnityDocset. Declaration public static void GenDocfxJson(UnityDocset unityDocset) Parameters Type Name Description UnityDocset unityDocset The UnityDocset object containing the docfx.json data. GetDocfxCommand(string, string) Gets a process to run a docfx command with specified arguments and folder. Declaration public static Process GetDocfxCommand(string argument, string folder) Parameters Type Name Description string argument The arguments to pass to the docfx command. string folder The folder containing the docfx.json file. Returns Type Description System.Diagnostics.Process A process configured to run the docfx command. InstallDocfx(EventHandler) Installs docfx using the dotnet tool command. Declaration public static void InstallDocfx(EventHandler onDisposed) Parameters Type Name Description System.EventHandler onDisposed OpenCmd(string, EventHandler, string) Opens a command prompt and executes a command. Declaration public static void OpenCmd(string command, EventHandler onDisposed, string cmdOption = \"/K\") Parameters Type Name Description string command The command to execute. System.EventHandler onDisposed Event handler to call when the process is disposed. string cmdOption"
  },
  "api/Lustie.UnityDocfx.DocfxSetupTool.html": {
    "href": "api/Lustie.UnityDocfx.DocfxSetupTool.html",
    "title": "Class DocfxSetupTool | Unity Docfx",
    "keywords": "Class DocfxSetupTool UnityDocfx Tool Window Inheritance object DocfxSetupTool Namespace: Lustie.UnityDocfx Assembly: cs.temp.dll.dll Syntax public class DocfxSetupTool : EditorWindow Methods GetWindow() Declaration public static DocfxSetupTool GetWindow() Returns Type Description DocfxSetupTool Open() Declaration public static void Open() OpenAsset(int, int) Declaration public static bool OpenAsset(int instanceID, int line) Parameters Type Name Description int instanceID int line Returns Type Description bool ShowWindow(UnityDocset) Declaration public static void ShowWindow(UnityDocset unityDocset) Parameters Type Name Description UnityDocset unityDocset"
  },
  "api/Lustie.UnityDocfx.DocfxTemplates.html": {
    "href": "api/Lustie.UnityDocfx.DocfxTemplates.html",
    "title": "Class DocfxTemplates | Unity Docfx",
    "keywords": "Class DocfxTemplates Contains template links for Docfx. Inheritance object DocfxTemplates Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Lustie.UnityDocfx Assembly: cs.temp.dll.dll Syntax public class DocfxTemplates Fields templateLinks List of the template links. Declaration public static readonly (string title, string url)[] templateLinks Field Value Type Description (string title, string url)[]"
  },
  "api/Lustie.UnityDocfx.DocfxTemplatesPath.html": {
    "href": "api/Lustie.UnityDocfx.DocfxTemplatesPath.html",
    "title": "Class DocfxTemplatesPath | Unity Docfx",
    "keywords": "Class DocfxTemplatesPath Inheritance object DocfxTemplatesPath Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Lustie.UnityDocfx Assembly: cs.temp.dll.dll Syntax public class DocfxTemplatesPath Methods CurrentPath() Get current path Declaration public static string CurrentPath() Returns Type Description string LoadTemplates(string, out string) Declaration public static bool LoadTemplates(string fileName, out string filePath) Parameters Type Name Description string fileName string filePath Returns Type Description bool"
  },
  "api/Lustie.UnityDocfx.GlobalMetadata.html": {
    "href": "api/Lustie.UnityDocfx.GlobalMetadata.html",
    "title": "Class GlobalMetadata | Unity Docfx",
    "keywords": "Class GlobalMetadata template metadata: https://dotnet.github.io/docfx/docs/template.html?tabs=modern#template-metadata Inheritance object GlobalMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Lustie.UnityDocfx Assembly: cs.temp.dll.dll Syntax [Serializable] public class GlobalMetadata Fields _appFaviconPath Declaration public string _appFaviconPath Field Value Type Description string _appFooter Declaration public string _appFooter Field Value Type Description string _appLogoPath Declaration public string _appLogoPath Field Value Type Description string _appLogoUrl Declaration public string _appLogoUrl Field Value Type Description string _appName Declaration public string _appName Field Value Type Description string _appTitle Declaration public string _appTitle Field Value Type Description string _disableContribution Declaration public bool _disableContribution Field Value Type Description bool _enableSearch Declaration public bool _enableSearch Field Value Type Description bool"
  },
  "api/Lustie.UnityDocfx.HelpBox.html": {
    "href": "api/Lustie.UnityDocfx.HelpBox.html",
    "title": "Class HelpBox | Unity Docfx",
    "keywords": "Class HelpBox Inheritance object HelpBox Namespace: Lustie.UnityDocfx Assembly: cs.temp.dll.dll Syntax public class HelpBox : UnityEngine.UIElements.HelpBox Constructors HelpBox() Declaration public HelpBox()"
  },
  "api/Lustie.UnityDocfx.html": {
    "href": "api/Lustie.UnityDocfx.html",
    "title": "Namespace Lustie.UnityDocfx | Unity Docfx",
    "keywords": "Namespace Lustie.UnityDocfx Classes Build Content DocfxData DocfxService Provides services for interacting with docfx, including checking installation, installing docfx, opening command prompts, and running docfx commands. DocfxSetupTool UnityDocfx Tool Window DocfxTemplates Contains template links for Docfx. DocfxTemplatesPath GlobalMetadata template metadata: https://dotnet.github.io/docfx/docs/template.html?tabs=modern#template-metadata HelpBox JObjectExtensions LiveServer Simple HTTP server to serve static websites. Metadata PathField Resource SomeExtensions Src TOC UIPath UnityDocset Unity Docset data Enums PathField.PathType SortOption SortOrder"
  },
  "api/Lustie.UnityDocfx.JObjectExtensions.html": {
    "href": "api/Lustie.UnityDocfx.JObjectExtensions.html",
    "title": "Class JObjectExtensions | Unity Docfx",
    "keywords": "Class JObjectExtensions Inheritance object JObjectExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Lustie.UnityDocfx Assembly: cs.temp.dll.dll Syntax public static class JObjectExtensions Methods GetJArray(JObject, string) Get property as JArray Declaration public static JArray GetJArray(this JObject jobject, string propertyName) Parameters Type Name Description JObject jobject string propertyName Returns Type Description JArray GetJObject(JObject, string) Get property as JObject Declaration public static JObject GetJObject(this JObject jobject, string propertyName) Parameters Type Name Description JObject jobject string propertyName Returns Type Description JObject GetJValue(JObject, string) Get property as JValue Declaration public static JValue GetJValue(this JObject jobject, string propertyName) Parameters Type Name Description JObject jobject string propertyName Returns Type Description JValue GetValue<T>(JObject, string) Get property value (JToken) Declaration public static T GetValue<T>(this JObject jobject, string propertyName) where T : JToken Parameters Type Name Description JObject jobject string propertyName Returns Type Description T Type Parameters Name Description T ReplaceValues(JToken, string, string) Function to recursively replace values Declaration public static void ReplaceValues(this JToken token, string target, string replacement) Parameters Type Name Description JToken token string target string replacement"
  },
  "api/Lustie.UnityDocfx.LiveServer.html": {
    "href": "api/Lustie.UnityDocfx.LiveServer.html",
    "title": "Class LiveServer | Unity Docfx",
    "keywords": "Class LiveServer Simple HTTP server to serve static websites. Inheritance object LiveServer Implements System.IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Lustie.UnityDocfx Assembly: cs.temp.dll.dll Syntax public class LiveServer : IDisposable Constructors LiveServer(string, int) Declaration public LiveServer(string folderPath, int port) Parameters Type Name Description string folderPath int port Properties IsRunning Declaration public bool IsRunning { get; } Property Value Type Description bool Methods Dispose() Declaration public void Dispose() GetUrl() Declaration public string GetUrl() Returns Type Description string Run() Declaration public void Run() Operators implicit operator bool(LiveServer) Declaration public static implicit operator bool(LiveServer server) Parameters Type Name Description LiveServer server Returns Type Description bool Implements System.IDisposable"
  },
  "api/Lustie.UnityDocfx.Metadata.html": {
    "href": "api/Lustie.UnityDocfx.Metadata.html",
    "title": "Class Metadata | Unity Docfx",
    "keywords": "Class Metadata Inheritance object Metadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Lustie.UnityDocfx Assembly: cs.temp.dll.dll Syntax [Serializable] public class Metadata Fields dest Declaration public string dest Field Value Type Description string globalNamespaceId Declaration public string globalNamespaceId Field Value Type Description string src Declaration public List<Src> src Field Value Type Description System.Collections.Generic.List<T><Src>"
  },
  "api/Lustie.UnityDocfx.PathField.html": {
    "href": "api/Lustie.UnityDocfx.PathField.html",
    "title": "Class PathField | Unity Docfx",
    "keywords": "Class PathField Inheritance object PathField Implements IBindable INotifyValueChanged<><string> Namespace: Lustie.UnityDocfx Assembly: cs.temp.dll.dll Syntax public class PathField : VisualElement, IBindable, INotifyValueChanged<string> Constructors PathField() Declaration public PathField() Properties binding Declaration public IBinding binding { get; set; } Property Value Type Description IBinding bindingPath Declaration public string bindingPath { get; set; } Property Value Type Description string buttonBrowseLabel Declaration public string buttonBrowseLabel { get; set; } Property Value Type Description string buttonViewLabel Declaration public string buttonViewLabel { get; set; } Property Value Type Description string extensions Declaration public string extensions { get; set; } Property Value Type Description string FullPath Declaration public string FullPath { get; } Property Value Type Description string label Declaration public string label { get; set; } Property Value Type Description string pathType Declaration public PathField.PathType pathType { get; set; } Property Value Type Description PathField.PathType value Declaration public string value { get; set; } Property Value Type Description string Methods SetValueWithoutNotify(string) Declaration public void SetValueWithoutNotify(string newValue) Parameters Type Name Description string newValue Implements IBindable INotifyValueChanged<>"
  },
  "api/Lustie.UnityDocfx.PathField.PathType.html": {
    "href": "api/Lustie.UnityDocfx.PathField.PathType.html",
    "title": "Enum PathField.PathType | Unity Docfx",
    "keywords": "Enum PathField.PathType Namespace: Lustie.UnityDocfx Assembly: cs.temp.dll.dll Syntax public enum PathField.PathType Fields Name Description Directory File"
  },
  "api/Lustie.UnityDocfx.Resource.html": {
    "href": "api/Lustie.UnityDocfx.Resource.html",
    "title": "Class Resource | Unity Docfx",
    "keywords": "Class Resource Inheritance object Resource Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Lustie.UnityDocfx Assembly: cs.temp.dll.dll Syntax [Serializable] public class Resource Fields files Declaration public List<string> files Field Value Type Description System.Collections.Generic.List<T><string>"
  },
  "api/Lustie.UnityDocfx.SomeExtensions.html": {
    "href": "api/Lustie.UnityDocfx.SomeExtensions.html",
    "title": "Class SomeExtensions | Unity Docfx",
    "keywords": "Class SomeExtensions Inheritance object SomeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Lustie.UnityDocfx Assembly: cs.temp.dll.dll Syntax public static class SomeExtensions Methods CopyToClipboard(string) Declaration public static void CopyToClipboard(this string text) Parameters Type Name Description string text MakeReorderable(ListView) Declaration public static void MakeReorderable(this ListView listView) Parameters Type Name Description ListView listView"
  },
  "api/Lustie.UnityDocfx.SortOption.html": {
    "href": "api/Lustie.UnityDocfx.SortOption.html",
    "title": "Enum SortOption | Unity Docfx",
    "keywords": "Enum SortOption Namespace: Lustie.UnityDocfx Assembly: cs.temp.dll.dll Syntax public enum SortOption Fields Name Description Custom Name"
  },
  "api/Lustie.UnityDocfx.SortOrder.html": {
    "href": "api/Lustie.UnityDocfx.SortOrder.html",
    "title": "Enum SortOrder | Unity Docfx",
    "keywords": "Enum SortOrder Namespace: Lustie.UnityDocfx Assembly: cs.temp.dll.dll Syntax public enum SortOrder Fields Name Description Ascending Decending"
  },
  "api/Lustie.UnityDocfx.Src.html": {
    "href": "api/Lustie.UnityDocfx.Src.html",
    "title": "Class Src | Unity Docfx",
    "keywords": "Class Src Inheritance object Src Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Lustie.UnityDocfx Assembly: cs.temp.dll.dll Syntax [Serializable] public class Src Fields exclude Declaration public List<string> exclude Field Value Type Description System.Collections.Generic.List<T><string> files Declaration public List<string> files Field Value Type Description System.Collections.Generic.List<T><string> src Declaration public string src Field Value Type Description string"
  },
  "api/Lustie.UnityDocfx.Tests.Enemy.html": {
    "href": "api/Lustie.UnityDocfx.Tests.Enemy.html",
    "title": "Class Enemy | Unity Docfx",
    "keywords": "Class Enemy Represents an enemy in the game Inheritance object Enemy Namespace: Lustie.UnityDocfx.Tests Assembly: cs.temp.dll.dll Syntax public class Enemy : MonoBehaviour Fields health The health of the enemy Declaration public int health Field Value Type Description int Properties armor The armor of the enemy Declaration public float armor { get; set; } Property Value Type Description float Methods Move(Vector2) Move the enemy Declaration public void Move(Vector2 direction) Parameters Type Name Description Vector2 direction move direction"
  },
  "api/Lustie.UnityDocfx.Tests.html": {
    "href": "api/Lustie.UnityDocfx.Tests.html",
    "title": "Namespace Lustie.UnityDocfx.Tests | Unity Docfx",
    "keywords": "Namespace Lustie.UnityDocfx.Tests Classes Enemy Represents an enemy in the game Player Player controller"
  },
  "api/Lustie.UnityDocfx.Tests.Player.html": {
    "href": "api/Lustie.UnityDocfx.Tests.Player.html",
    "title": "Class Player | Unity Docfx",
    "keywords": "Class Player Player controller Inheritance object Player Namespace: Lustie.UnityDocfx.Tests Assembly: cs.temp.dll.dll Syntax public class Player : MonoBehaviour Methods Start() Start is called before the first frame update Declaration public void Start() Update() Update is called once per frame Declaration public void Update()"
  },
  "api/Lustie.UnityDocfx.TOC.html": {
    "href": "api/Lustie.UnityDocfx.TOC.html",
    "title": "Class TOC | Unity Docfx",
    "keywords": "Class TOC Inheritance object TOC Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Lustie.UnityDocfx Assembly: cs.temp.dll.dll Syntax [Serializable] public class TOC Constructors TOC(string, string, string) Declaration public TOC(string name, string href, string hrefOption) Parameters Type Name Description string name string href string hrefOption Fields href Declaration public string href Field Value Type Description string HREF_CUSTOM Declaration public const string HREF_CUSTOM = \"Custom\" Field Value Type Description string HREF_README Declaration public const string HREF_README = \"README.md to index.md\" Field Value Type Description string hrefOption Declaration public string hrefOption Field Value Type Description string name Declaration public string name Field Value Type Description string sortOption Declaration public SortOption sortOption Field Value Type Description SortOption sortOrder Declaration public SortOrder sortOrder Field Value Type Description SortOrder Properties trueHref Declaration public string trueHref { get; } Property Value Type Description string"
  },
  "api/Lustie.UnityDocfx.UIPath.html": {
    "href": "api/Lustie.UnityDocfx.UIPath.html",
    "title": "Class UIPath | Unity Docfx",
    "keywords": "Class UIPath Inheritance object UIPath Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Lustie.UnityDocfx Assembly: cs.temp.dll.dll Syntax public static class UIPath Methods LoadUss(string) Declaration public static StyleSheet LoadUss(string fileName) Parameters Type Name Description string fileName Returns Type Description StyleSheet LoadUxml(string) Declaration public static VisualTreeAsset LoadUxml(string fileName) Parameters Type Name Description string fileName Returns Type Description VisualTreeAsset UxmlAssetPath(string) Declaration public static string UxmlAssetPath(string fileName) Parameters Type Name Description string fileName Returns Type Description string"
  },
  "api/Lustie.UnityDocfx.UnityDocset.html": {
    "href": "api/Lustie.UnityDocfx.UnityDocset.html",
    "title": "Class UnityDocset | Unity Docfx",
    "keywords": "Class UnityDocset Unity Docset data Inheritance object UnityDocset Namespace: Lustie.UnityDocfx Assembly: cs.temp.dll.dll Syntax public class UnityDocset : ScriptableObject Fields docfxJson docfx.json data Declaration public DocfxData docfxJson Field Value Type Description DocfxData folder Folder Declaration public string folder Field Value Type Description string port Server's port Declaration public int port Field Value Type Description int TOC Table of contents list Declaration public List<TOC> TOC Field Value Type Description System.Collections.Generic.List<T><TOC> Properties currentDocfxFolderPath Get current documentaion directory where contains docfx.json Declaration public string currentDocfxFolderPath { get; } Property Value Type Description string"
  },
  "index.html": {
    "href": "index.html",
    "title": "unity-docfx | Unity Docfx",
    "keywords": "unity-docfx Installation https://github.com/lusties/unity-docfx.git?path=Assets/UnityDocfx Example: https://lusties.github.io/unity-docfx/"
  },
  "manual/Manual.html": {
    "href": "manual/Manual.html",
    "title": "| Unity Docfx",
    "keywords": "Note Information the user should notice even if skimming. Tip Optional information to help a user be more successful. Important Essential information required for user success. Caution Negative potential consequences of an action. Warning Dangerous certain consequences of an action. This sentence uses $ delimiters to show math inline: $\\sqrt{3x-1}+(1+x)^2$ flowchart LR A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] Linux Windows Content for Linux... Content for Windows..."
  },
  "manual/Markdown.html": {
    "href": "manual/Markdown.html",
    "title": "Markdown | Unity Docfx",
    "keywords": "Markdown Markdown is a lightweight markup language with plain text formatting syntax. Docfx supports CommonMark compliant Markdown parsed through the Markdig parsing engine. Markdown Extensions Docfx supports additional markdown syntax that provide richer content. These syntax are specific to docfx and won't be rendered elsewhere like GitHub. In addition to its own extensions, docfx also supports the use of the markdown extensions provided by Markdig. The following list of Markdig extensions are enabled by default for docfx: Mathematics Emphasis Extras Auto Identifiers Media Links Pipe Tables Auto Links Emoji To use other custom markdown extensions: Use docfx as a NuGet library: <PackageReference Include=\"Docfx.App\" Version=\"2.70.0\" /> Configure the markdig markdown pipeline: var options = new BuildOptions { // Enable custom markdown extensions here ConfigureMarkdig = pipeline => pipeline.UseAbbreviations().UseFootnotes(), } await Docset.Build(\"docfx.json\", options); Alternatively, set the build.markdownEngineProperties.markdigExtensions property in docfx.json to the list of additional extensions to use: { \"build\": { \"markdownEngineProperties\": { \"markdigExtensions\": [ \"Abbreviations\", \"Footnotes\" ] } } } The known extension names are listed in MardownExtensions.Configure method in the MarkDig project. Note The custom configuration of extensions via the build.markdownEngineProperties.markdigExtensions property is not supported. YAML header Also referred to as YAML Front Matter, the YAML header is used to annotate a Markdown file with various metadata elements. It should appear at the top of the document. Here's an example: --- uid: fileA --- # This is fileA ... In this example, the UID provides a unique identifier for the file and is intended to be unique inside a project. If you define duplicate UID for two files, the resolve result is undetermined. For API reference files, the UID is auto generated by mangling the API's signature. For example, the System.String class's UID is System.String. You can open a generated YAML file to lookup the value of its UID. Note Conceptual Markdown file doesn't have UID generated by default. So it cannot be cross referenced unless you give it a UID. See the list of predefined metadata for applicable options for inclusion in the YAML header. Alerts Alerts are block quotes that render with colors and icons that indicate the significance of the content. The following alert types are supported: > [!NOTE] > Information the user should notice even if skimming. > [!TIP] > Optional information to help a user be more successful. > [!IMPORTANT] > Essential information required for user success. > [!CAUTION] > Negative potential consequences of an action. > [!WARNING] > Dangerous certain consequences of an action. They look like this in rendered page: Note Information the user should notice even if skimming. Tip Optional information to help a user be more successful. Important Essential information required for user success. Caution Negative potential consequences of an action. Warning Dangerous certain consequences of an action. Custom Alerts You can define custom alerts with the build.markdownEngineProperties.alerts property in docfx.json and use it in markdown files. The key specifies the markdown keyword without the surrounding [!, ] symbols. The value is the CSS class names: { \"build\": { \"markdownEngineProperties\": { \"alerts\": { \"TODO\": \"alert alert-secondary\" } } } } > [!TODO] > This is a custom TODO section The above custom alert looks like this in rendered page: [!TODO] This is a custom TODO section DocFX allows you to customize the display of alert titles in your documentation. By default, alert titles are displayed as the keyword in upper case. To change this behavior, you can create a custom template and use a token.json file to define your custom alert titles: Create a custom template: Follow the steps in the [Custom Template Guide](create a custom template) to create your own template. Create a token.json file: In your custom template folder, create a new file named token.json. This file will be used to define your custom alert titles. The format should be as follows: { \"todo\": \"MY TODO\" } In this example, the key is the alert keyword in lower case (e.g., \"todo\"), and the value is the custom display title of the alert (e.g., \"MY TODO\"). Video You can embed a video in your page by using the following Markdown syntax: > [!Video embed_link] Example: > [!Video https://www.youtube.com/embed/Sz1lCeedcPI] This will be rendered as: Image You can embed a image in your page by using the following Markdown syntax: ![ <alt-text> ]( <image-link> ) Example: ![alt-text](https://learn.microsoft.com/en-us/media/learn/not-found/learn-not-found-light-mode.png?branch=main) This will be rendered as: Math Expressions Docfx supports LaTeX formatted math expressions within markdown using MathJax. Note Math expressions is only supported in the modern template. To include a math expression inline with your text, delimit the expression with a dollar symbol $. This sentence uses `$` delimiters to show math inline: $\\sqrt{3x-1}+(1+x)^2$ This sentence uses $ delimiters to show math inline: $\\sqrt{3x-1}+(1+x)^2$ To add a math expression as a block, start a new line and delimit the expression with two dollar symbols $$. **The Cauchy-Schwarz Inequality** $$\\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right)$$ The Cauchy-Schwarz Inequality $$\\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right)$$ Mermaid Diagrams You can embed mermaid diagrams using markdown code block: Example: ```mermaid flowchart LR A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] ``` This will be rendered as: flowchart LR A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] Note Mermaid diagrams is only supported in the modern template. There are plenty of other diagrams supported by mermaid such as: Pie chart pie \"Dogs\" : 386 \"Cats\" : 85.9 \"Rats\" : 15 Bar chart gantt title Git Issues - days since last update dateFormat X axisFormat %s section Issue19062 71 : 0, 71 section Issue19401 36 : 0, 36 section Issue193 34 : 0, 34 section Issue7441 9 : 0, 9 section Issue1300 5 : 0, 5 User Journey diagram journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 3: Me Class diagram classDiagram Class01 <|-- AveryLongClass : Cool <<Interface>> Class01 Class09 --> C2 : Where am I? Class09 --* C3 Class09 --|> Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { <<service>> int id size() } PlantUML Diagrams You can embed PlantUML diagrams using markdown code blocks: Example: ```plantuml Bob -> Alice : hello ``` This will be rendered as: There are plenty of other diagrams supported by PlantUML such as: Sequence diagram Use Case diagram Class diagram Activity diagram Component diagram State diagram Gantt diagram Deployment diagram Mindmap diagram Refer to the PlantUml reference guide for more details. Settings The PlantUML extension can be configured using the build.markdownEngineProperties.plantUml property of your docfx.json file: { \"build\": { \"markdownEngineProperties\": { \"plantUml\": { \"outputFormat\": \"svg\", \"remoteUrl\": \"http://www.plantuml.com/plantuml/\", \"renderingMode\": \"remote\" } } } } The following settings are available for configuration: Setting Description Default javaPath path to java installation uses the JAVA_HOME environment variable localGraphvizDotPath path to graphviz dot exe (required for local rendering mode only) none localPlantUmlPath path to plantuml.jar will look in project directory outputFormat format of generated images (svg, ascii, ascii_unicode) svg remoteUrl url to remote PlantUml server (required for remote rendering mode only) http://www.plantuml.com/plantuml/ renderingMode remote or local remote Local Rendering By default, PlantUML diagrams will be rendered on the remote server. Local rendering mode uses a local copy of PlantUML to render diagrams. Local rendering mode can be configured in your docfx.json file: { \"build\": { \"markdownEngineProperties\": { \"plantUml\": { \"localPlantUmlPath\": \"path/to/plantuml.jar\", \"renderingMode\": \"local\" } } } } Note GraphViz Dot is required for local rendering mode of any diagram other than sequence. Refer to the PlantUML documentation for more detailed instructions. Include Markdown Files Where markdown files need to be repeated in multiple articles, you can use an include file. The includes feature replace the reference with the contents of the included file at build time. You can reuse a common text snippet within a sentence using inline include: Text before [!INCLUDE [<title>](<filepath>)] and after. Or reuse an entire Markdown file as a block, nested within a section of an article. Block include is on its own line: [!INCLUDE [<title>](<filepath>)] Where <title> is the name of the file and <filepath> is the relative path to the file. Example: [!INCLUDE [my-markdown-block](../../includes/my-markdown-block.md)] Included markdown files needs to be excluded from build, they are usually placed in the /includes folder. Code Snippet There are several ways to include code in an article. The code snippet syntax replaces code from another file: [!code-csharp[](Program.cs)] You can include selected lines from the code snippet using region or line range syntax: [!code-csharp[](Program.cs#region)] [!code-csharp[](Program.cs#L12-L16)] Code snippets are indicated by using a specific link syntax described as follows: [!code-<language>[](<filepath><query-options>)] Where <language> is the syntax highlighting language of the code and <filepath> is the relative path to the markdown file. Highlight Selected Lines Code Snippets typically include more code than necessary in order to provide context. It helps readability when you highlight the key lines that you're focusing on. To highlight key lines, use the highlight query options: [!code-csharp[](Program.cs?highlight=2,5-7,9-)] The example highlights lines 2, line 5 to 7 and lines 9 to the end of the file. Warning It looks like the sample you are looking for does not exist. Tabs Tabs enable content that is multi-faceted. They allow sections of a document to contain variant content renderings and eliminates duplicate content. Here's an example of the tab experience: Linux Windows Content for Linux... Content for Windows... The above tab group was created with the following syntax: # [Linux](#tab/linux) Content for Linux... # [Windows](#tab/windows) Content for Windows... --- Tabs are indicated by using a specific link syntax within a Markdown header. The syntax can be described as follows: # [Tab Display Name](#tab/tab-id) A tab starts with a Markdown header, #, and is followed by a Markdown link [](). The text of the link will become the text of the tab header, displayed to the customer. In order for the header to be recognized as a tab, the link itself must start with #tab/ and be followed by an ID representing the content of the tab. The ID is used to sync all same-ID tabs across the page. Using the above example, when a user selects a tab with the link #tab/windows, all tabs with the link #tab/windows on the page will be selected. Dependent tabs It's possible to make the selection in one set of tabs dependent on the selection in another set of tabs. Here's an example of that in action: .NET .NET TypeScript TypeScript REST API .NET content for Linux... .NET content for Windows... TypeScript content for Linux... TypeScript content for Windows... REST API content, independent of platform... Notice how changing the Linux/Windows selection above changes the content in the .NET and TypeScript tabs. This is because the tab group defines two versions for each .NET and TypeScript, where the Windows/Linux selection above determines which version is shown for .NET/TypeScript. Here's the markup that shows how this is done: # [.NET](#tab/dotnet/linux) .NET content for Linux... # [.NET](#tab/dotnet/windows) .NET content for Windows... # [TypeScript](#tab/typescript/linux) TypeScript content for Linux... # [TypeScript](#tab/typescript/windows) TypeScript content for Windows... # [REST API](#tab/rest) REST API content, independent of platform... --- Differences introduced by DFM syntax Warning Please note that DFM introduces more syntax to support more functionalities. When GFM does not support them, preview the Markdown file inside GFM Preview can lead to different results. Text after block extension Some block extension in DFM cannot be recognized in GFM. In GFM, it would be treated as a part of paragraph. Then, following content would be treated as a part of paragraph. For example: > [!NOTE] > This is code. In GFM, it will be rendered as a paragraph with content [!NOTE] This is code. in blockquote. In DFM, it will be rendered as a code in note."
  }
}